{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../Helpers/utils.js"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    ScriptKind,\r\n    createPrinter,\r\n    parseConfigFileTextToJson,\r\n    createSourceFile,\r\n    createCompilerHost,\r\n    SyntaxKind,\r\n    visitEachChild,\r\n    resolveModuleName,\r\n    createGetCanonicalFileName,\r\n    createModuleResolutionCache,\r\n    Debug,\r\n    loadWithLocalCache,\r\n    normalizeSlashes\r\n} from \"typescript\"\r\nimport fs, {\r\n    readFileSync,\r\n    existsSync\r\n} from \"fs\"\r\nimport { transpilers } from \"../init/Compiler/Transpiler/Module\"\r\nimport path from \"path/posix\"\r\nimport { App } from \"../init/App\"\r\nimport tsModule from 'typescript/lib/tsserverlibrary';\r\n\r\nexport const deepAssign = (target, ...sources) => {\r\n    for (const source of sources) {\r\n        for (let k in source) {\r\n            let vs = source[k],\r\n                vt = target[k]\r\n            if (Object(vs) == vs && Object(vt) === vt) {\r\n                target[k] = deepAssign(vt, vs)\r\n                continue\r\n            }\r\n            target[k] = source[k]\r\n        }\r\n    }\r\n    return target\r\n}\r\nvar Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\r\nexport const getColumnName = (i) => {\r\n    var l = Chars.length,\r\n        p = i >= l ? getColumnName(Math.floor(i / l) - 1) : \"\",\r\n        ls = Chars[i % l];\r\n    return p + ls;\r\n};\r\n\r\n\r\n\r\n\r\nexport const createHost = (__compilerOptions) => {\r\n    let FilesThree = new Map();\r\n    const getSourceFileByExtName = (fileName, languageVersion) => {\r\n\r\n        console.log(\"ðŸš€ getSourceFileByExtName ---> fileName\", fileName)\r\n        switch (path.extname(fileName).toLocaleLowerCase()) {\r\n            case \".ts\":\r\n            case \".tsx\":\r\n            case \".js\":\r\n            case \".jsx\":\r\n            case \".json\":\r\n                return createSourceFile(fileName, readFileSync(fileName, \"utf-8\"), languageVersion, true)\r\n            case \".scss\":\r\n            case \".css\":\r\n                return createSourceFile(fileName, `\r\n                 var sfsdfs = 2\r\n                export { sfsdfs };\r\n                export default \"44444\";\r\n                `, languageVersion, true)\r\n            // default\r\n        }\r\n    }\r\n    const isCssRegex = /\\.(((c|le|sa|sc)ss)|styl)$/,\r\n        _HOST = createCompilerHost(__compilerOptions, true),\r\n        currentDirectory = _HOST.getCurrentDirectory(),\r\n        getCanonicalFileName = createGetCanonicalFileName(_HOST.useCaseSensitiveFileNames()),\r\n        moduleResolutionCache = createModuleResolutionCache(currentDirectory, getCanonicalFileName),\r\n        Module_loader = function (moduleName, containingFile, redirectedReference) {\r\n\r\n\r\n            if (isCssRegex.test(moduleName)) {\r\n                return {\r\n                    extension: tsModule.Extension.Js,\r\n                    isExternalLibraryImport: false,\r\n                    resolvedFileName: path.join(\r\n                        path.dirname(containingFile),\r\n                        moduleName,\r\n                    ),\r\n                };\r\n            }\r\n            return resolveModuleName(moduleName, containingFile, __compilerOptions, Host, moduleResolutionCache, redirectedReference).resolvedModule;\r\n        },\r\n        Host = Object.assign(_HOST, {\r\n            getSourceFile: (fileName, languageVersion) => {\r\n                if (existsSync(fileName)) {\r\n\r\n                    return FilesThree.get(fileName) || getSourceFileByExtName(fileName, languageVersion)\r\n                }\r\n            },\r\n            resolveModuleNames: function (moduleNames, containingFile, _reusedNames, redirectedReference) {\r\n                // console.log({ resolved: loadWithLocalCache(Debug.checkEachDefined(moduleNames), containingFile, redirectedReference, Module_loader) })\r\n                return loadWithLocalCache(Debug.checkEachDefined(moduleNames), containingFile, redirectedReference, Module_loader);\r\n            },\r\n            resetFilesThree: (newFilesMap) => (FilesThree = new Map([...FilesThree, ...newFilesMap])),\r\n            // getDefaultLibLocation: () => normalizeSlashes(path.resolve(__dirname + \"/../node_modules/typescript/lib/\")),\r\n        })\r\n\r\n    return Host\r\n\r\n}\r\nexport const fixLibFileLocationInCompilerOptions = (compilerOptions) => {\r\n    if (compilerOptions.lib) {\r\n        // compilerOptions.lib=[]\r\n        // delete compilerOptions.lib\r\n        console.log(normalizeSlashes(path.resolve(__dirname + \"/../node_modules/typescript/lib/lib.es2016.d.ts\")));\r\n\r\n    }\r\n    // console.log(\"ðŸš€ --> file: utils.js --> line 111 --> fixLibFileLocationInCompilerOptions --> compilerOptions\", compilerOptions);\r\n    return compilerOptions\r\n}\r\n\r\n// \"../../../node_modules/typescript/lib\"\r\n// import sss from \r\nexport const parseJsonFile = (fileName) => {\r\n    return fs.existsSync(fileName) ? parseConfigFileTextToJson(fileName, readFileSync(fileName, \"utf8\")).config : {}\r\n}\r\n\r\n\r\n\r\nexport const getImportModuleName = () => `________KIX__IMPORT__MODULE__${new Date().getTime()}__`\r\n\r\n\r\n\r\nexport const getModuleFiles = (Module, ModuleFiles) => {\r\n    for (const MODULE_PATH in Module.NodeModules) {\r\n        ModuleFiles.add(MODULE_PATH)\r\n    }\r\n    for (const LocalModulesPathKey in Module.LocalModules) {\r\n        getModuleFiles(Module.LocalModules[LocalModulesPathKey], ModuleFiles)\r\n    }\r\n}\r\n\r\nlet ModuleUnnesesaryIndex = 0;\r\nexport const getModuleWindowName = () => {\r\n    return `_KIX${++ModuleUnnesesaryIndex}${new Date().getTime()}`\r\n}"]}