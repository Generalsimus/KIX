{"version":3,"file":"express.js","sourceRoot":"","sources":["../../init/express.js"],"names":[],"mappings":";;;;;;AAAA,sDAA6B;AAC7B,4CAA0B;AAC1B,gDAAuB;AACvB,gDAAuB;AACvB,4DAAkC;AAG3B,MAAM,UAAU,GAAG,CAAC,EAAE,YAAY,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;IAE7F,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,eAAe,GAAG,IAAI,YAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,eAAe,EAAE,CAAC,CAAC;IAG9F,YAAY;IACZ,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,IAAI;QAC5B,uBAAuB;QACvB,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAExC,IAAI,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,oBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC;YACtE,GAAG,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;SAC7C;aAAM;YACH,IAAI,EAAE,CAAC;SACV;IACL,CAAC,CAAC,CAAC;IACH,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;IAC5C,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;QAEjC,MAAM,QAAQ,GAAG,UAAU,aAAa,QAAQ,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;QAEvE,IAAA,cAAI,EAAC,QAAQ,CAAC,CAAC;QAEf,wBAAwB;QACxB,wJAAwJ;QAExJ,qCAAqC;IACzC,CAAC,CAAC,CAAC;IACH,6FAA6F;IAE7F,OAAO;QACH,eAAe;QACf,QAAQ;KACX,CAAA;AACL,CAAC,CAAA;AArCY,QAAA,UAAU,cAqCtB","sourcesContent":["import express from \"express\"\r\nimport WebSocket from \"ws\"\r\nimport http from \"http\"\r\nimport open from \"open\"\r\nimport mimeTypes from \"mime-types\"\r\nimport { getWebSocketUrl } from \"../main/getWebSocketUrl\"\r\n\r\nexport const initServer = ({ __RunDirName, __requestsThreshold, __compilerOptions: { port } }) => {\r\n\r\n    const app = express();\r\n    const server = http.createServer(app);\r\n    const WebSocketServer = new WebSocket.Server({ server, path: `/${Date.now()}/AppControler` });\r\n\r\n\r\n    // WebSocket\r\n    app.use(function (req, res, next) {\r\n        // ._parsedUrl.pathname\r\n        res.header(\"Cache-Control\", \"no-cache\");\r\n\r\n        if (__requestsThreshold.has(req.path)) {\r\n            res.header(\"content-type\", mimeTypes.lookup(req.path) || \"text/html\");\r\n            res.end(__requestsThreshold.get(req.path))\r\n        } else {\r\n            next();\r\n        }\r\n    });\r\n    app.use(\"./\", express.static(__RunDirName));\r\n    const listener = server.listen(port, function () {\r\n\r\n        const http_url = `http://${`localhost:${listener.address()[\"port\"]}`}`;\r\n\r\n        open(http_url);\r\n\r\n        // console.log(http_url)\r\n        // console.save(`\\nYou can now view in the browser: `, \"white\", http_url, 'blue', `\\nTo create a production build, use: `, \"white\", 'npm build', 'blue')\r\n\r\n        // console.log('\\x1b[32m%s\\x1b[0m',);\r\n    });\r\n    // console.log(\"ğŸš€ ---> file: express.js ---> line 26 ---> listener ---> listener\", listener)\r\n\r\n    return {\r\n        WebSocketServer,\r\n        listener\r\n    }\r\n}"]}