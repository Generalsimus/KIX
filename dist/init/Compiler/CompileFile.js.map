{"version":3,"file":"CompileFile.js","sourceRoot":"","sources":["../../../init/Compiler/CompileFile.js"],"names":[],"mappings":"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","sourcesContent":["import { readSourceFiles } from \"./readSourceFiles\"\r\nimport { App } from \"../App\"\r\nimport ts, { createProgram, getDirectoryPath, getBaseFileName, normalizeSlashes } from \"typescript\"\r\nimport chokidar from \"chokidar\"\r\nimport path from \"path/posix\"\r\nimport { getImportModuleName, getModuleFiles, getModuleWindowName } from \"../../Helpers/utils\"\r\nimport { ModuleTransformersAfter, ModuleTransformersBefore } from \"./Transpiler/Module\"\r\nimport resolve from 'resolve'\r\nimport { getTransformersObject, ModulesThree, resolveModule } from \"./Transpiler/utils\"\r\nimport { NodeModuleTransformersBefore } from \"./Transpiler/NodeModules\"\r\nimport { Compile_Node_Modules } from \"./CompileModules\"\r\nimport { JSXTransformersBefore } from \"./Transpiler/JSX/index\"\r\n\r\n\r\nconst { __compilerOptions, __Host, __RunDirName, __ModuleUrlPath, __requestsThreshold } = App\r\nconst { resetFilesThree } = __Host\r\n\r\nlet resetModules = true;\r\nlet oldProgram;\r\nexport const CompileFile = (FilePath, HTMLFilePaths) => {\r\n    const outFile = path.relative(__RunDirName, FilePath),\r\n        __Import_Module_Name = getImportModuleName(),\r\n        __Module_Window_Name = getModuleWindowName(),\r\n        REQUEST_PATH = (\"./\" + outFile).replace(/(^[\\.\\.\\/]+)|(\\/+)/g, \"/\"),\r\n        MAP_REQUEST_PATH = REQUEST_PATH + \".map\"\r\n\r\n    const compilerOptions = {\r\n        ...__compilerOptions,\r\n        inlineSources: true,\r\n        outFile,\r\n        __Module_Window_Name,\r\n        rootDir: __RunDirName,\r\n        __Import_Module_Name,\r\n        resetModuleFiles: () => { resetModules = true },\r\n        __Url_Dir_Path: path.dirname(REQUEST_PATH)\r\n    }\r\n\r\n    const transformers = getTransformersObject([ModuleTransformersBefore, JSXTransformersBefore], [ModuleTransformersAfter])\r\n    oldProgram = createProgram(\r\n        [FilePath],\r\n        compilerOptions,\r\n        __Host,\r\n        oldProgram\r\n    );\r\n\r\n\r\n\r\n\r\n    oldProgram.emit(\r\n        undefined /*sourceFile*/,\r\n        (fileName, content) => {\r\n\r\n            console.log({ fileName, REQUEST_PATH })\r\n            const ext = path.extname(fileName)\r\n            if (ext === \".map\") {\r\n                __requestsThreshold.set(MAP_REQUEST_PATH, content)\r\n                // console.log(content)\r\n            } else if (ext === \".js\") {\r\n                const Module_Text = `(function(${__Import_Module_Name}){${content} \\n return ${__Import_Module_Name}; })(window.${__Module_Window_Name}={})\\n//# sourceMappingURL=${MAP_REQUEST_PATH}`\r\n                __requestsThreshold.set(REQUEST_PATH, Module_Text)\r\n            }\r\n        }\r\n        // undefined\r\n        /*writeFileCallback*/,\r\n        undefined /*cancellationToken*/,\r\n        undefined /*emitOnlyDtsFiles*/,\r\n        transformers /*transformers*/\r\n    )\r\n\r\n    const Modules = new Set([resolveModule(\"kix\", __RunDirName)])\r\n    for (const ModuleFilePath of HTMLFilePaths) {\r\n        getModuleFiles(ModulesThree.get(ModuleFilePath), Modules)\r\n    }\r\n\r\n    if (resetModules) {\r\n        resetModules = false\r\n        Compile_Node_Modules(\r\n            [...Modules],\r\n            compilerOptions\r\n        )\r\n\r\n    }\r\n\r\n    resetFilesThree(oldProgram.getFilesByNameMap())\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Compile_Node_Modules = (NodeModuelsPaths, compilerOptions) => {\r\n    const transformers = getTransformersObject([ModuleTransformersBefore, NodeModuleTransformersBefore], [ModuleTransformersAfter]),\r\n        __Module_Window_Name = compilerOptions.__Node_Module_Window_Name;\r\n\r\n    oldProgram = createProgram(NodeModuelsPaths,\r\n        {\r\n            ...compilerOptions,\r\n            outFile: __ModuleUrlPath,\r\n            removeComments: true,\r\n            sourceMap: false,\r\n            __Module_Window_Name,\r\n            resetModuleFiles: () => { },\r\n        },\r\n        {\r\n            ...__Host,\r\n            resolveModuleNames: (moduleNames, containingFile, reusedNames, redirectedReference) => {\r\n                // console.log(containingFile)\r\n                return moduleNames.map((ModuleText) => {\r\n                    const modulePath = resolve.sync(ModuleText, {\r\n                        basedir: path.dirname(containingFile),\r\n                        extensions: ['.js', '.ts'],\r\n                    })\r\n                    // console.log(modulePath)\r\n                    return {\r\n                        resolvedFileName: modulePath,\r\n                        originalPath: undefined,\r\n                        extension: path.extname(modulePath),\r\n                        isExternalLibraryImport: false,\r\n                        packageId: undefined\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        oldProgram\r\n    );\r\n    oldProgram.emit(\r\n        undefined /*sourceFile*/,\r\n        (fileName, content) => {\r\n\r\n            if (path.extname(fileName) == \".js\") {\r\n                __requestsThreshold.set(\r\n                    __ModuleUrlPath,\r\n                    `(function(${compilerOptions.__Import_Module_Name}){${content} \\n return ${compilerOptions.__Import_Module_Name};})((window.${__Module_Window_Name}={}))`\r\n                )\r\n            }\r\n\r\n        }\r\n        // undefined\r\n        /*writeFileCallback*/,\r\n        undefined /*cancellationToken*/,\r\n        undefined /*emitOnlyDtsFiles*/,\r\n        transformers /*transformers*/\r\n    )\r\n}"]}