{"version":3,"file":"CompileFile.js","sourceRoot":"","sources":["../../../init/Compiler/CompileFile.js"],"names":[],"mappings":"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","sourcesContent":["import { readSourceFiles } from \"./readSourceFiles\"\r\nimport { App } from \"../App\"\r\nimport ts, { createProgram, getDirectoryPath, getBaseFileName, normalizeSlashes } from \"typescript\"\r\nimport chokidar from \"chokidar\"\r\nimport path from \"path\"\r\nimport { createCancellationToken, getImportModuleName, getModuleFiles, getModuleWindowName } from \"../../Helpers/utils\"\r\nimport { ModuleTransformersAfter, ModuleTransformersBefore } from \"./Transpiler/Module\"\r\nimport resolve from 'resolve'\r\nimport { getTransformersObject, ModulesThree, resolveModule } from \"./Transpiler/utils\"\r\nimport { NodeModuleTransformersBefore } from \"./Transpiler/NodeModules\"\r\nimport { JSXTransformersBefore } from \"./Transpiler/JSX/index\"\r\nimport fs from \"fs\"\r\n\r\n\r\n\r\nconst { __Host, __RunDirName, __ModuleUrlPath, __requestsThreshold } = App\r\nconst { resetFilesThree } = __Host\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet increm = 0;\r\nexport const CompileFile = (FilePath, HTMLFilePaths, __compilerOptions) => {\r\n    let resetModules = true;\r\n    let oldProgram;\r\n    const outFile = path.relative(__RunDirName, FilePath),\r\n        __Import_Module_Name = getImportModuleName(),\r\n        __Module_Window_Name = getModuleWindowName(),\r\n        REQUEST_PATH = (\"./\" + outFile).replace(/(^[\\.\\.\\/]+)|(\\/+)/g, \"/\"),\r\n        MAP_REQUEST_PATH = REQUEST_PATH + \".map\",\r\n        changeFileCallback = () => {\r\n\r\n            // console.clear()\r\n            console.log(\"ðŸš€ --> file: utils.js --> line 69 --> increm\", ++increm);\r\n\r\n            compilerOptions.cancellationToken = createCancellationToken()\r\n\r\n            oldProgram = createProgram(\r\n                compilableFilePaths,\r\n                compilerOptions,\r\n                __Host,\r\n                oldProgram\r\n            );\r\n            oldProgram.emit(\r\n                undefined /*sourceFile*/,\r\n                writeFileCallback /*writeFileCallback*/,\r\n                undefined /*cancellationToken*/,\r\n                undefined /*emitOnlyDtsFiles*/,\r\n                transformers /*transformers*/\r\n            )\r\n            if (resetModules) {\r\n                const Modules = new Set(defaultModules)\r\n                for (const ModuleFilePath of HTMLFilePaths) {\r\n                    ModuleFilePath && getModuleFiles(ModulesThree.get(ModuleFilePath), Modules)\r\n                }\r\n                resetModules = false\r\n                Compile_Node_Modules(\r\n                    [...Modules],\r\n                    compilerOptions\r\n                )\r\n\r\n            }\r\n            // console.log(\"ðŸš€ --> file: CompileFile.js --> line 55 --> CompileFile --> oldProgram\", oldProgram);\r\n            // console.log(\"ðŸš€ --> file: CompileFile.js --> line 55 --> CompileFile --> oldProgram\", oldProgram.getGlobalDiagnostics());\r\n\r\n            resetFilesThree(oldProgram.getFilesByNameMap())\r\n        },\r\n        compilerOptions = {\r\n            ...__compilerOptions,\r\n            inlineSources: true,\r\n            watch: true,\r\n            outFile,\r\n            __Module_Window_Name,\r\n            rootDir: __RunDirName,\r\n            __Import_Module_Name,\r\n            changeFileCallback,\r\n            resetModuleFiles: () => {\r\n                resetModules = true\r\n            },\r\n            __Url_Dir_Path: path.dirname(REQUEST_PATH)\r\n        },\r\n        transformers = getTransformersObject([ModuleTransformersBefore, JSXTransformersBefore], [ModuleTransformersAfter]),\r\n        compilableFilePaths = [FilePath],\r\n        defaultModules = [\r\n            // resolveModule(\"kix\", __RunDirName),\r\n            normalizeSlashes(path.join(__dirname, \"./../../main/controler.js\"))\r\n        ],\r\n        writeFileCallback = (fileName, content) => {\r\n            // console.log({ fileName, REQUEST_PATH })\r\n\r\n            const ext = path.extname(fileName)\r\n            if (ext === \".map\") {\r\n                __requestsThreshold.set(MAP_REQUEST_PATH, content)\r\n            } else if (ext === \".js\") {\r\n                const Module_Text = `(function(${__Import_Module_Name}){${content} \\n return ${__Import_Module_Name}; })(window.${__Module_Window_Name}={})\\n//# sourceMappingURL=${MAP_REQUEST_PATH}`\r\n                __requestsThreshold.set(REQUEST_PATH, Module_Text)\r\n                console.log(Module_Text)\r\n            }\r\n        };\r\n    console.log(\"ðŸš€ --> file: CompileFile.js --> line 83 --> CompileFile --> defaultModules\", defaultModules);\r\n    // console.log(\"ðŸš€ --> file: CompileFile.js --> line 97 --> CompileFile --> __dirname\", __dirname);\r\n    // console.log(\"ðŸš€ --> file: CompileFile.js --> line 15 --> __Host\", __Host );\r\n    // console.log(\"ðŸš€ --> file: CompileFile.js --> line 15 --> __Host\", __Host.getDefaultLibLocation(compilerOptions));\r\n    changeFileCallback()\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Compile_Node_Modules = (NodeModuelsPaths, compilerOptions) => {\r\n    let Node_oldProgram;\r\n    const transformers = getTransformersObject([ModuleTransformersBefore, NodeModuleTransformersBefore], [ModuleTransformersAfter]),\r\n        __Module_Window_Name = compilerOptions.__Node_Module_Window_Name;\r\n\r\n\r\n\r\n\r\n\r\n    Node_oldProgram = createProgram(NodeModuelsPaths,\r\n        {\r\n            ...compilerOptions,\r\n            outFile: __ModuleUrlPath,\r\n            removeComments: false,\r\n            lib: undefined,\r\n            sourceMap: false,\r\n            __Module_Window_Name,\r\n            resetModuleFiles: () => { },\r\n        },\r\n        {\r\n            ...__Host,\r\n            resolveModuleNames: (moduleNames, containingFile, reusedNames, redirectedReference) => {\r\n                // console.log(containingFile)\r\n                return moduleNames.map((ModuleText) => {\r\n                    const modulePath = resolve.sync(ModuleText, {\r\n                        basedir: path.dirname(containingFile),\r\n                        extensions: ['.js', '.ts'],\r\n                    })\r\n                    // console.log(modulePath)\r\n                    return {\r\n                        resolvedFileName: modulePath,\r\n                        originalPath: undefined,\r\n                        extension: path.extname(modulePath),\r\n                        isExternalLibraryImport: false,\r\n                        packageId: undefined\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        Node_oldProgram\r\n    );\r\n    Node_oldProgram.emit(\r\n        undefined /*sourceFile*/,\r\n        (fileName, content) => {\r\n\r\n            if (path.extname(fileName) == \".js\") {\r\n                __requestsThreshold.set(\r\n                    __ModuleUrlPath,\r\n                    `(function(${compilerOptions.__Import_Module_Name}){${content} \\n return ${compilerOptions.__Import_Module_Name};})((window.${__Module_Window_Name}={}))`\r\n                )\r\n                console.log(\r\n                    __ModuleUrlPath,\r\n                    `(function(${compilerOptions.__Import_Module_Name}){${content} \\n return ${compilerOptions.__Import_Module_Name};})((window.${__Module_Window_Name}={}))`\r\n                )\r\n            }\r\n\r\n        }\r\n        // undefined\r\n        /*writeFileCallback*/,\r\n        undefined /*cancellationToken*/,\r\n        undefined /*emitOnlyDtsFiles*/,\r\n        transformers /*transformers*/\r\n    )\r\n}"]}