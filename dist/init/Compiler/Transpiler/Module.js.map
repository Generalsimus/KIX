{"version":3,"file":"Module.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/Module.js"],"names":[],"mappings":"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","sourcesContent":["import ts, {\r\n    factory,\r\n    visitEachChild,\r\n    getDirectoryPath,\r\n    isNamespaceExport,\r\n    idText,\r\n    createIdentifier,\r\n    normalizeSlashes,\r\n    SyntaxKind,\r\n    getLocalNameForExternalImport,\r\n    collectExternalModuleInfo,\r\n    createIdentifier,\r\n    SignatureKind,\r\n    TransformFlags,\r\n    ScriptKind\r\n} from \"typescript\"\r\nimport { generateFactory } from \"./createFactoryCode\"\r\nimport resolve from 'resolve'\r\nimport path from \"path/posix\"\r\nimport chokidar from \"chokidar\"\r\nimport { FilesThree, getColumnName } from \"../../../Helpers/utils\"\r\nimport { configModules, getOrSetModuleInfo, ModulesThree, watchModuleFileChange } from \"./utils\"\r\nimport { topLevelVisitor } from \"./amdBodyVisitor\"\r\nimport { App } from \"../../App\"\r\n\r\n// console.log(\"ðŸš€ ---> file: Module.js ---> line 16 ---> TransformFlags\", TransformFlags)\r\nconst { ContainsDynamicImport } = TransformFlags\r\nconst {\r\n    createStringLiteral,\r\n    createCallExpression,\r\n    createUniqueName,\r\n    createExpressionStatement,\r\n    createParenthesizedExpression,\r\n    createReturnStatement,\r\n    createIdentifier\r\n} = factory\r\nconst {\r\n    CREATE_Export_File_Function,\r\n    CREATE_Plus_Token_Nodes,\r\n    CREATE_Const_Variable,\r\n    CREATE_Property_Access_Expression,\r\n    CREATE_Equals_Token_Nodes,\r\n    CREATE_Object_Binding_Pattern,\r\n    CREATE_CAll_Function,\r\n    CREATE_Assign_Polyfil,\r\n    CREATE_Property_Access_Equals_Token,\r\n    CREATE_Object_WiTH_String_Keys\r\n} = generateFactory\r\n// defaultModulePaths\r\n\r\n\r\n// const watcher = chokidar.watch([]);\r\n// let STATEMENTS = []\r\n// let stateNode = CREATE_Call_Function(STATEMENTS)\r\n// let UNICNAME = ts.createUniqueName('AAA')\r\n// let incremm = 0\r\nexport const visited_SourceFiles = new Map()\r\nexport const ModuleTransformersBefore = {\r\n    [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 58 --> CTX\", CTX);\r\n        // if (NODE.before_visited) return NODE\r\n        const visited_NODE = visited_SourceFiles.get(NODE.originalFileName)\r\n        // const visited_NODE = FilesThree.get(NODE.path)\r\n\r\n        if (visited_NODE) {\r\n            return visited_NODE\r\n        }\r\n\r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 65 --> NODE.originalFileName\", visited_SourceFiles.keys(), NODE.originalFileName, ++incremm);\r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 60 --> NODE.before_visited\", NODE.before_visited);\r\n\r\n        const compilerOptions = CTX.getCompilerOptions()\r\n        const moduleInfo = getOrSetModuleInfo(NODE.originalFileName, compilerOptions)\r\n\r\n        CTX.ModuleColection = configModules(NODE, moduleInfo, compilerOptions)\r\n\r\n        if (!moduleInfo.isNodeModule && !moduleInfo.fileWatcher) {\r\n            watchModuleFileChange(NODE, moduleInfo, compilerOptions)\r\n        }\r\n\r\n        try {\r\n            if (ts.isJsonSourceFile(NODE)) {\r\n\r\n                NODE = ts.updateSourceFileNode(NODE, [createExpressionStatement(CREATE_Property_Access_Equals_Token(CREATE_Object_WiTH_String_Keys([\r\n                    [createIdentifier(\"default\"), ...NODE.statements]\r\n                ]), [compilerOptions.__Import_Module_Name, getColumnName(moduleInfo.Module_INDEX)]))])\r\n\r\n                NODE.scriptKind = ScriptKind.Unknown\r\n            } else {\r\n                console.log(\"ðŸš€ --> file: Module.js --> line 63 --> NODE.originalFileName\", [NODE.originalFileName]);\r\n                NODE = ts.updateSourceFileNode(NODE, [\r\n                    createExpressionStatement(\r\n                        CREATE_Export_File_Function(\r\n                            NODE.statements.flatMap((statementNode) => topLevelVisitor(statementNode, NODE, CTX)),\r\n                            compilerOptions.__Import_Module_Name,\r\n                            moduleInfo.Module_INDEX\r\n                        )\r\n                    )\r\n                ]\r\n                )\r\n            }\r\n            NODE.externalModuleIndicator = undefined\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n        NODE = visitEachChild(NODE, visitor, CTX)\r\n        // NODE.before_visited = true;\r\n        visited_SourceFiles.set(NODE.originalFileName, NODE)\r\n        // setFileinThree.set(NODE.originalFileName, NODE)\r\n        // App.__Host.setFileinThree(NODE.originalFileName.toLowerCase(), NODE)\r\n        // .set(NODE.originalFileName)\r\n        // FilesThree.set(NODE.path, NODE)\r\n        return NODE\r\n    }\r\n}\r\n\r\n\r\nexport const ModuleTransformersAfter = {\r\n    // [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n    //     if (NODE.After_visited) return NODE\r\n\r\n    //     NODE.After_visited = true;\r\n    //     return NODE\r\n    // }\r\n}\r\n\r\n"]}