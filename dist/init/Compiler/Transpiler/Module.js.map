{"version":3,"file":"Module.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/Module.js"],"names":[],"mappings":"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","sourcesContent":["import ts, {\r\n    factory,\r\n    visitEachChild,\r\n    getDirectoryPath,\r\n    isNamespaceExport,\r\n    idText,\r\n    createIdentifier,\r\n    normalizeSlashes,\r\n    SyntaxKind,\r\n    getLocalNameForExternalImport,\r\n    collectExternalModuleInfo,\r\n    createIdentifier,\r\n    SignatureKind,\r\n    TransformFlags,\r\n    ScriptKind\r\n} from \"typescript\"\r\nimport { generateFactory } from \"./createFactoryCode\"\r\nimport resolve from 'resolve'\r\nimport path from \"path/posix\"\r\nimport chokidar from \"chokidar\"\r\nimport { getColumnName } from \"../../../Helpers/utils\"\r\nimport { configModules, getOrSetModuleInfo, ModulesThree } from \"./utils\"\r\nimport { topLevelVisitor } from \"./amdBodyVisitor\"\r\n\r\n// console.log(\"ðŸš€ ---> file: Module.js ---> line 16 ---> TransformFlags\", TransformFlags)\r\nconst { ContainsDynamicImport } = TransformFlags\r\nconst {\r\n    createStringLiteral,\r\n    createCallExpression,\r\n    createUniqueName,\r\n    createExpressionStatement,\r\n    createParenthesizedExpression,\r\n    createReturnStatement,\r\n    createIdentifier\r\n} = factory\r\nconst {\r\n    CREATE_Export_File_Function,\r\n    CREATE_Plus_Token_Nodes,\r\n    CREATE_Const_Variable,\r\n    CREATE_Property_Access_Expression,\r\n    CREATE_Equals_Token_Nodes,\r\n    CREATE_Object_Binding_Pattern,\r\n    CREATE_CAll_Function,\r\n    CREATE_Assign_Polyfil,\r\n    CREATE_Property_Access_Equals_Token,\r\n    CREATE_Object_WiTH_String_Keys\r\n} = generateFactory\r\n\r\n\r\n\r\nconst watcher = chokidar.watch([]);\r\n// let STATEMENTS = []\r\n// let stateNode = CREATE_Call_Function(STATEMENTS)\r\n// let UNICNAME = ts.createUniqueName('AAA')\r\n\r\nexport const ModuleTransformersBefore = {\r\n    // [SyntaxKind.ExportAssignment]: (Node) => {  \r\n    // }, \r\n    // [SyntaxKind.ArrowFunction]: (NODE, visitor, CTX) => { \r\n    //     // return visitEachChild(NODE, visitor, CTX)\r\n    // },\r\n    [SyntaxKind.ImportDeclaration]: (NODE, visitor, CTX) => {\r\n        // return visitEachChild(NODE, visitor, CTX)\r\n    },\r\n    [SyntaxKind.ExportKeyword]: (NODE, visitor, CTX) => {\r\n        // delete NODE.parent \r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 65 --> NODE\", NODE);\r\n\r\n        // console.log(\"ExportKeyword\",NODE)\r\n        //     // return visitEachChild(NODE, visitor, CTX)\r\n    },\r\n    [SyntaxKind.ExportDeclaration]: (NODE, visitor, CTX) => {\r\n\r\n        // delete NODE.parent \r\n        // console.log(\"ExportKeyword\",NODE)\r\n        //     // return visitEachChild(NODE, visitor, CTX)\r\n    },\r\n\r\n    // [SyntaxKind.ImportKeyword]: (NODE, visitor, CTX) => {\r\n    //     //     console.log(\"ðŸš€ ---> file: transpilers.js ---> line 31 ---> CTX\",)\r\n    //     if (NODE.parent.arguments) {\r\n    //         NODE.parent.arguments[0] = CREATE_Plus_Token_Nodes([createStringLiteral(CTX.getCompilerOptions().__Url_Dir_Path), NODE.parent.arguments[0]])\r\n    //     }\r\n    //     return ts.createIdentifier(\"ASYNC_IMPORT_POLYFIL\")\r\n    // },\r\n    // [SyntaxKind.RequireKeyword]: (NODE, visitor, CTX) => {\r\n    //     return ts.createIdentifier(\"ssssssssssssss\")\r\n    // },\r\n    [SyntaxKind.ExportAssignment]: (NODE, visitor, CTX) => {\r\n        // delete NODE.parent\r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 89 --> NODE.parent\", NODE.parent); \r\n        // console.log(\"ðŸš€ --> file: Module.js --> line 88 --> NODE\", NODE); \r\n\r\n    },\r\n\r\n\r\n    [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n        console.log(\"ðŸš€ --> file: Module.js --> line 97 --> CTX\", CTX.startLexicalEnvironment);\r\n        if (NODE.before_visited) return NODE\r\n\r\n        const compilerOptions = CTX.getCompilerOptions()\r\n        const moduleInfo = getOrSetModuleInfo(NODE.originalFileName)\r\n\r\n\r\n        if (!moduleInfo.isNodeModule) {\r\n            chokidar.watch(NODE.originalFileName).on('change', (event, path) => {\r\n                console.log(\"chokidar___\", event, path);\r\n            });\r\n        }\r\n\r\n        CTX.ModuleColection = configModules(NODE, moduleInfo, compilerOptions)\r\n        \r\n\r\n\r\n        NODE.statements = NODE.statements.flatMap((node) => topLevelVisitor(node, CTX))\r\n        // collectExternalModuleInfo\r\n\r\n\r\n        try {\r\n            if (ts.isJsonSourceFile(NODE)) {\r\n                NODE.scriptKind = ScriptKind.Unknown\r\n                NEWSTATEMENT.push(createExpressionStatement(CREATE_Property_Access_Equals_Token(CREATE_Object_WiTH_String_Keys([\r\n                    [createIdentifier(\"default\"), NODE.statements[0].expression]\r\n                ]), [compilerOptions.__Import_Module_Name, getColumnName(moduleInfo.Module_INDEX)])))\r\n\r\n            } else {\r\n                NEWSTATEMENT.push(createExpressionStatement(CREATE_Export_File_Function(NODE.statements, compilerOptions.__Import_Module_Name, moduleInfo.Module_INDEX)))\r\n            }\r\n\r\n\r\n            NODE.statements = NEWSTATEMENT\r\n            NODE.externalModuleIndicator = undefined\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n        NODE.before_visited = true;\r\n        return visitEachChild(NODE, visitor, CTX)\r\n    }\r\n}\r\n\r\n\r\nexport const ModuleTransformersAfter = {\r\n    [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n        if (NODE.After_visited) return NODE\r\n\r\n        NODE.After_visited = true;\r\n        return NODE\r\n    }\r\n}\r\n\r\n"]}