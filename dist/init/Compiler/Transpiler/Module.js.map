{"version":3,"file":"Module.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/Module.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAemB;AACnB,2DAAqD;AAGrD,wDAA+B;AAC/B,kDAAsD;AACtD,mCAAyE;AACzE,qDAAkD;AAElD,0FAA0F;AAC1F,MAAM,EAAE,qBAAqB,EAAE,GAAG,2BAAc,CAAA;AAChD,MAAM,EACF,mBAAmB,EACnB,oBAAoB,EACpB,gBAAgB,EAChB,yBAAyB,EACzB,6BAA6B,EAC7B,qBAAqB,EACrB,gBAAgB,EACnB,GAAG,oBAAO,CAAA;AACX,MAAM,EACF,2BAA2B,EAC3B,uBAAuB,EACvB,qBAAqB,EACrB,iCAAiC,EACjC,yBAAyB,EACzB,6BAA6B,EAC7B,oBAAoB,EACpB,qBAAqB,EACrB,mCAAmC,EACnC,8BAA8B,EACjC,GAAG,mCAAe,CAAA;AACnB,qBAAqB;AAGrB,sCAAsC;AACtC,sBAAsB;AACtB,mDAAmD;AACnD,4CAA4C;AAE/B,QAAA,wBAAwB,GAAG;IACpC,CAAC,uBAAU,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE;QAC5C,IAAI,IAAI,CAAC,cAAc;YAAE,OAAO,IAAI,CAAA;QACpC,MAAM,eAAe,GAAG,GAAG,CAAC,kBAAkB,EAAE,CAAA;QAChD,MAAM,UAAU,GAAG,IAAA,0BAAkB,EAAC,IAAI,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAA;QAC7E,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;YAC1B,kBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBAC/D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;SACN;QAED,GAAG,CAAC,eAAe,GAAG,IAAA,qBAAa,EAAC,IAAI,EAAE,UAAU,EAAE,eAAe,CAAC,CAAA;QAGtE,IAAI;YACA,IAAI,oBAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,GAAG,uBAAU,CAAC,OAAO,CAAA;gBACpC,IAAI,CAAC,UAAU,GAAG,CAAC,yBAAyB,CAAC,mCAAmC,CAAC,8BAA8B,CAAC;wBAC5G,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;qBAC/D,CAAC,EAAE,CAAC,eAAe,CAAC,oBAAoB,EAAE,IAAA,qBAAa,EAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;aAExF;iBAAM;gBACH,IAAI,CAAC,UAAU,GAAG,CAAC,yBAAyB,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,gCAAe,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,oBAAoB,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC,CAAE,CAAA;aAC5M;YACD,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAA;SAC3C;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACrB;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,OAAO,IAAA,2BAAc,EAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAA;IAC7C,CAAC;CACJ,CAAA;AAGY,QAAA,uBAAuB,GAAG;AACnC,qDAAqD;AACrD,0CAA0C;AAE1C,iCAAiC;AACjC,kBAAkB;AAClB,IAAI;CACP,CAAA","sourcesContent":["import ts, {\r\n    factory,\r\n    visitEachChild,\r\n    getDirectoryPath,\r\n    isNamespaceExport,\r\n    idText,\r\n    createIdentifier,\r\n    normalizeSlashes,\r\n    SyntaxKind,\r\n    getLocalNameForExternalImport,\r\n    collectExternalModuleInfo,\r\n    createIdentifier,\r\n    SignatureKind,\r\n    TransformFlags,\r\n    ScriptKind\r\n} from \"typescript\"\r\nimport { generateFactory } from \"./createFactoryCode\"\r\nimport resolve from 'resolve'\r\nimport path from \"path/posix\"\r\nimport chokidar from \"chokidar\"\r\nimport { getColumnName } from \"../../../Helpers/utils\"\r\nimport { configModules, getOrSetModuleInfo, ModulesThree } from \"./utils\"\r\nimport { topLevelVisitor } from \"./amdBodyVisitor\"\r\n\r\n// console.log(\"ðŸš€ ---> file: Module.js ---> line 16 ---> TransformFlags\", TransformFlags)\r\nconst { ContainsDynamicImport } = TransformFlags\r\nconst {\r\n    createStringLiteral,\r\n    createCallExpression,\r\n    createUniqueName,\r\n    createExpressionStatement,\r\n    createParenthesizedExpression,\r\n    createReturnStatement,\r\n    createIdentifier\r\n} = factory\r\nconst {\r\n    CREATE_Export_File_Function,\r\n    CREATE_Plus_Token_Nodes,\r\n    CREATE_Const_Variable,\r\n    CREATE_Property_Access_Expression,\r\n    CREATE_Equals_Token_Nodes,\r\n    CREATE_Object_Binding_Pattern,\r\n    CREATE_CAll_Function,\r\n    CREATE_Assign_Polyfil,\r\n    CREATE_Property_Access_Equals_Token,\r\n    CREATE_Object_WiTH_String_Keys\r\n} = generateFactory\r\n// defaultModulePaths\r\n\r\n\r\n// const watcher = chokidar.watch([]);\r\n// let STATEMENTS = []\r\n// let stateNode = CREATE_Call_Function(STATEMENTS)\r\n// let UNICNAME = ts.createUniqueName('AAA')\r\n\r\nexport const ModuleTransformersBefore = {\r\n    [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n        if (NODE.before_visited) return NODE\r\n        const compilerOptions = CTX.getCompilerOptions()\r\n        const moduleInfo = getOrSetModuleInfo(NODE.originalFileName, compilerOptions)\r\n        if (!moduleInfo.isNodeModule) {\r\n            chokidar.watch(NODE.originalFileName).on('change', (event, path) => {\r\n                console.log(\"chokidar___\", event, path);\r\n            });\r\n        }\r\n\r\n        CTX.ModuleColection = configModules(NODE, moduleInfo, compilerOptions)\r\n\r\n\r\n        try {\r\n            if (ts.isJsonSourceFile(NODE)) {\r\n                NODE.scriptKind = ScriptKind.Unknown\r\n                NODE.statements = [createExpressionStatement(CREATE_Property_Access_Equals_Token(CREATE_Object_WiTH_String_Keys([\r\n                    [createIdentifier(\"default\"), NODE.statements[0].expression]\r\n                ]), [compilerOptions.__Import_Module_Name, getColumnName(moduleInfo.Module_INDEX)]))]\r\n\r\n            } else {\r\n                NODE.statements = [createExpressionStatement(CREATE_Export_File_Function(NODE.statements.flatMap((node) => topLevelVisitor(node, CTX)), compilerOptions.__Import_Module_Name, moduleInfo.Module_INDEX)))]\r\n            }\r\n            NODE.externalModuleIndicator = undefined\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n        NODE.before_visited = true;\r\n        return visitEachChild(NODE, visitor, CTX)\r\n    }\r\n}\r\n\r\n\r\nexport const ModuleTransformersAfter = {\r\n    // [SyntaxKind.SourceFile]: (NODE, visitor, CTX) => {\r\n    //     if (NODE.After_visited) return NODE\r\n\r\n    //     NODE.After_visited = true;\r\n    //     return NODE\r\n    // }\r\n}\r\n\r\n"]}