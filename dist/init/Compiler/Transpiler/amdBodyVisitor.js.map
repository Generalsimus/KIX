{"version":3,"file":"amdBodyVisitor.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/amdBodyVisitor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yDAA2C;AAC3C,2DAAqD;AAErD,mCAA8C;AAE9C,MAAM,OAAO,GAAG,oBAAE,CAAC,OAAO,CAAA;AAC1B,MAAM,EAAE,aAAa,EAAE,GAAG,uBAAU,CAAA;AACpC,MAAM,EACF,gBAAgB,EAChB,6BAA6B,EAC7B,oBAAoB,EACpB,gBAAgB,EACnB,GAAG,OAAO,CAAA;AACX,MAAM,EACF,2BAA2B,EAC3B,uBAAuB,EACvB,qBAAqB,EACrB,iCAAiC,EACjC,yBAAyB,EACzB,6BAA6B,EAC7B,oBAAoB,EACpB,qBAAqB,EACrB,mCAAmC,EACnC,8BAA8B,GACjC,GAAG,mCAAe,CAAA;AAEnB,SAAS,OAAO,CAAC,IAAI,IAAI,OAAO,IAAI,CAAA,CAAC,CAAC;AAEtC,SAAgB,eAAe,CAAC,IAAI,EAAE,GAAG;IACrC,OAAO,CAAC,GAAG,CAAC,6EAA6E,EAAE,IAAI,CAAC,IAAI,EAAE,uBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7H,QAAQ,IAAI,CAAC,IAAI,EAAE;QACf,KAAK,uBAAU,CAAC,iBAAiB;YAC7B,OAAO,sBAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC7C,YAAY;QACZ,iDAAiD;QACjD,KAAK,uBAAU,CAAC,iBAAiB;YAC7B,OAAO,sBAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;QAC5C,KAAK,uBAAU,CAAC,gBAAgB;YAC5B,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAA;QACtC,KAAK,uBAAU,CAAC,cAAc;YAC1B,OAAO,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACxC,KAAK,uBAAU,CAAC,mBAAmB;YAC/B,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA;QACzC,KAAK,uBAAU,CAAC,gBAAgB;YAC5B,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAA;QACtC,YAAY;QACZ,gDAAgD;QAChD,YAAY;QACZ,gDAAgD;QAChD;YACI,OAAO,CAAC,IAAI,CAAC,CAAC;KACrB;AACL,CAAC;AAxBD,0CAwBC;AACD,SAAS,sBAAsB,CAAC,IAAI,EAAE,GAAG;IACrC,uGAAuG;IACvG,mEAAmE;IACnE,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAA;IACtC,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,YAAY,EAAE;QACxC,OAAO,CAAC,IAAI,CAAC,CAAC;KACjB;IACD,oFAAoF;IAEpF,MAAM,eAAe,GAAG,GAAG,CAAC,kBAAkB,EAAE,CAAA;IAChD,MAAM,uBAAuB,GAAG,EAAE,CAAA;IAElC,IAAI,oBAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;QAC1B,MAAM,UAAU,GAAG,IAAA,4BAAoB,EAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;QACxG,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAC1B,uBAAuB,CAAC,IAAI,CAAC;gBACzB,YAAY,CAAC,IAAI;gBACjB,iCAAiC,CAAC,UAAU,CAAC;aAChD,CAAC,CAAA;SACL;KAGJ;IACD,MAAM,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;IACjD,IAAI,aAAa,IAAI,aAAa,CAAC,QAAQ,EAAE;QACzC,KAAK,MAAM,OAAO,IAAI,aAAa,CAAC,QAAQ,EAAE;YAC1C,MAAM,UAAU,GAAG,IAAA,4BAAoB,EAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;YAExG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC,CAAA;YACrD,uBAAuB,CAAC,IAAI,CAAC;gBACzB,OAAO,CAAC,IAAI;gBACZ,iCAAiC,CAAC,UAAU,CAAC;aAChD,CAAC,CAAA;SAEL;KACJ;IAED,OAAO,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;AAE/F,CAAC;AAED,SAAS,sBAAsB,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,GAAG,EAAE;IACpD,MAAM,eAAe,GAAG,GAAG,CAAC,kBAAkB,EAAE,CAAA;IAChD,qBAAqB;IACrB,uHAAuH;IACvH,+BAA+B;IAC/B,gFAAgF;IAChF,oBAAoB;IACpB,wBAAwB;IACxB,IAAI;IAEJ,IAAI,aAAa,GAAG,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC1D,yHAAyH;IACzH,2CAA2C;IAC3C,IAAI,IAAI,CAAC,YAAY,IAAI,oBAAE,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QAC3D,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;YACpE,IAAI,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAEvB,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC;gBACpC,iCAAiC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC9D,SAAS,CAAC,YAAY,IAAI,SAAS,CAAC,IAAI;aAC3C,CAAC,CAAC,CAAA;SAEN;KACJ;SAAM,IAAI,IAAI,CAAC,YAAY,EAAE;QAC1B,oFAAoF;QAEpF,MAAM,UAAU,GAAG,IAAA,4BAAoB,EAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;QACxG,0CAA0C;QAC1C,sBAAsB;QACtB,IAAI;QACJ,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC;YACpC,iCAAiC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACtE,CACI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACV,iCAAiC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC/C,gBAAgB,CAAC,WAAW,CAAC,CACpC;SACJ,CAAC,CAAC,CAAA;QAEH,6BAA6B;QAC7B,kCAAkC;KACrC;SAAM;QACH,oFAAoF;QACpF,MAAM,UAAU,GAAG,IAAA,4BAAoB,EAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAA;QACxG,GAAG,CAAC,cAAc,GAAG,gBAAgB,CAAC,eAAe,CAAC,oBAAoB,GAAG,SAAS,CAAC,CAAA;QACvF,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAC9B,CAAC,GAAG,CAAC,cAAc,CAAC,EACpB,SAAS,EACT;YACI,gBAAgB,CAAC,SAAS,CAAC;YAC3B,CACI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACV,iCAAiC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC/C,6BAA6B,CAAC,EAAE,EAAE,KAAK,CAAC,CAC/C;SACJ,CACJ,CAAC,CAAA;QAEF,uBAAuB;KAC1B;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC;AAGD,SAAS,qBAAqB,CAAC,IAAI;IAC/B,OAAO,CAAC,yBAAyB,CAAC;YAC9B,iCAAiC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACzD,IAAI,CAAC,UAAU;SAClB,CAAC,CAAC,CAAA;AACP,CAAC;AAED,SAAS,6BAA6B,CAAC,IAAI,EAAE,KAAK;IAC9C,IAAI,oBAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAChC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;YAC5D,IAAI,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YACrB,IAAI,CAAC,oBAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE;gBAClC,6BAA6B,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACjD;SACJ;KACJ;SACI,IAAI,CAAC,oBAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,yBAAyB,CAAC;YACjC,iCAAiC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,IAAI;SACZ,CAAC,CAAC,CAAA;KACN;AACL,CAAC;AACD,SAAS,yBAAyB,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,IAAI,CAAC;IACtD,IACI,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,oBAAE,CAAC,UAAU,CAAC,aAAa,KAAK,IAAI,CAAC,EACzE;QACE,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;KAChD;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC;AAED,SAAS,qBAAqB,CAAC,IAAI;IAE/B,OAAO,yBAAyB,CAAC,IAAI,CAAC,CAAA;AAC1C,CAAC;AACD,SAAS,wBAAwB,CAAC,IAAI;IAElC,OAAO,yBAAyB,CAAC,IAAI,CAAC,CAAA;AAC1C,CAAC;AAKD,SAAS,sBAAsB,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,IAAI,CAAC;IACnD,IACI,IAAI,CAAC,SAAS;QACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,oBAAE,CAAC,UAAU,CAAC,aAAa,KAAK,IAAI,CAAC,EACzE;QACE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;YAC3E,IAAI,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YACtB,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;SACpD;KACJ;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC","sourcesContent":["import ts, { SyntaxKind } from \"typescript\"\r\nimport { generateFactory } from \"./createFactoryCode\"\r\nimport { getColumnName } from \"../../../Helpers/utils\"\r\nimport { geModuleLocationMeta } from \"./utils\"\r\n\r\nconst factory = ts.factory\r\nconst { ExportKeyword } = SyntaxKind\r\nconst {\r\n    createUniqueName,\r\n    createObjectLiteralExpression,\r\n    createCallExpression,\r\n    createIdentifier\r\n} = factory\r\nconst {\r\n    CREATE_Export_File_Function,\r\n    CREATE_Plus_Token_Nodes,\r\n    CREATE_Const_Variable,\r\n    CREATE_Property_Access_Expression,\r\n    CREATE_Equals_Token_Nodes,\r\n    CREATE_Object_Binding_Pattern,\r\n    CREATE_CAll_Function,\r\n    CREATE_Assign_Polyfil,\r\n    CREATE_Property_Access_Equals_Token,\r\n    CREATE_Object_WiTH_String_Keys,\r\n} = generateFactory\r\n\r\nfunction visitor(node) { return node }\r\n\r\nexport function topLevelVisitor(node, CTX) {\r\n    console.log(\"ðŸš€ --> file: amdBodyVisitor.js --> line 9 --> topLevelVisitor --> node.kind\", node.kind, SyntaxKind[node.kind]);\r\n    switch (node.kind) {\r\n        case SyntaxKind.ImportDeclaration:\r\n            return visitImportDeclaration(node, CTX);\r\n        // case 263:\r\n        //     return visitImportEqualsDeclaration(node);\r\n        case SyntaxKind.ExportDeclaration:\r\n            return visitExportDeclaration(node, CTX)\r\n        case SyntaxKind.ExportAssignment:\r\n            return visitExportAssignment(node)\r\n        case SyntaxKind.FirstStatement:\r\n            return visitVariableStatement(node);\r\n        case SyntaxKind.FunctionDeclaration:\r\n            return visitFunctionDeclaration(node)\r\n        case SyntaxKind.ClassDeclaration:\r\n            return visitClassDeclaration(node)\r\n        // case 347:\r\n        //     return visitMergeDeclarationMarker(node);\r\n        // case 348:\r\n        //     return visitEndOfDeclarationMarker(node);\r\n        default:\r\n            return [node];\r\n    }\r\n}\r\nfunction visitImportDeclaration(node, CTX) {\r\n    // console.log(\"ðŸš€ --> file: amdBodyVisitor.js --> line 54 --> visitImportDeclaration --> node\", node);\r\n    // var namespaceDeclaration = ts.getNamespaceDeclarationNode(node);\r\n    const importClause = node.importClause\r\n    if (!node.moduleSpecifier || !importClause) {\r\n        return [node];\r\n    }\r\n    // const Module_INDEX = CTX.ModuleColection[node.moduleSpecifier.text]?.Module_INDEX\r\n\r\n    const compilerOptions = CTX.getCompilerOptions()\r\n    const constVariablesNameValue = []\r\n\r\n    if (ts.isDefaultImport(node)) {\r\n        const ModuleData = geModuleLocationMeta(CTX.ModuleColection[node.moduleSpecifier.text], compilerOptions)\r\n        if (ModuleData) {\r\n            ModuleData.push(\"default\")\r\n            constVariablesNameValue.push([\r\n                importClause.name,\r\n                CREATE_Property_Access_Expression(ModuleData)\r\n            ])\r\n        }\r\n\r\n\r\n    }\r\n    const namedBindings = importClause.namedBindings;\r\n    if (namedBindings && namedBindings.elements) {\r\n        for (const element of namedBindings.elements) {\r\n            const ModuleData = geModuleLocationMeta(CTX.ModuleColection[node.moduleSpecifier.text], compilerOptions)\r\n\r\n            ModuleData.push(element.propertyName || element.name)\r\n            constVariablesNameValue.push([\r\n                element.name,\r\n                CREATE_Property_Access_Expression(ModuleData)\r\n            ])\r\n\r\n        }\r\n    }\r\n\r\n    return constVariablesNameValue.length ? CREATE_Const_Variable(constVariablesNameValue) : []\r\n\r\n}\r\n\r\nfunction visitExportDeclaration(node, CTX, newNodes = []) {\r\n    const compilerOptions = CTX.getCompilerOptions()\r\n    // delete node.parent\r\n    // console.log(\"ðŸš€ --> file: amdBodyVisitor.js --> line 50 --> visitExportDeclaration --> node.moduleSpecifier\", node);\r\n    // if (!node.moduleSpecifier) {\r\n    //     // Elide export declarations with no module specifier as they are handled\r\n    //     // elsewhere.\r\n    //     return undefined;\r\n    // }\r\n\r\n    var generatedName = factory.getGeneratedNameForNode(node);\r\n    // console.log(\"ðŸš€ --> file: amdBodyVisitor.js --> line 56 --> visitExportDeclaration --> generatedName\", generatedName);\r\n    // specifier.propertyName || specifier.name\r\n    if (node.exportClause && ts.isNamedExports(node.exportClause)) {\r\n        for (var _i = 0, _a = node.exportClause.elements; _i < _a.length; _i++) {\r\n            var specifier = _a[_i];\r\n\r\n            newNodes.push(CREATE_Equals_Token_Nodes([\r\n                CREATE_Property_Access_Expression([\"exports\", specifier.name]),\r\n                specifier.propertyName || specifier.name\r\n            ]))\r\n\r\n        }\r\n    } else if (node.exportClause) {\r\n        // const Module_INDEX = CTX.ModuleColection[node.moduleSpecifier.text]?.Module_INDEX\r\n\r\n        const ModuleData = geModuleLocationMeta(CTX.ModuleColection[node.moduleSpecifier.text], compilerOptions)\r\n        // if (typeof Module_INDEX !== \"number\") {\r\n        //     return newNodes\r\n        // }\r\n        newNodes.push(CREATE_Equals_Token_Nodes([\r\n            CREATE_Property_Access_Expression([\"exports\", node.exportClause.name]),\r\n            (\r\n                (ModuleData) ?\r\n                    CREATE_Property_Access_Expression(ModuleData) :\r\n                    createIdentifier(\"undefined\")\r\n            )\r\n        ]))\r\n\r\n        // export * as ns from \"mod\";\r\n        // export * as default from \"mod\";\r\n    } else {\r\n        // const Module_INDEX = CTX.ModuleColection[node.moduleSpecifier.text]?.Module_INDEX\r\n        const ModuleData = geModuleLocationMeta(CTX.ModuleColection[node.moduleSpecifier.text], compilerOptions)\r\n        CTX.assignPolyfill = createUniqueName(compilerOptions.__Import_Module_Name + \"_Assign\")\r\n        newNodes.push(createCallExpression(\r\n            (CTX.assignPolyfill),\r\n            undefined,\r\n            [\r\n                createIdentifier(\"exports\"),\r\n                (\r\n                    (ModuleData) ?\r\n                        CREATE_Property_Access_Expression(ModuleData) :\r\n                        createObjectLiteralExpression([], false)\r\n                )\r\n            ]\r\n        ))\r\n\r\n        // export * from \"mod\";\r\n    }\r\n    return newNodes\r\n}\r\n\r\n\r\nfunction visitExportAssignment(node) {\r\n    return [CREATE_Equals_Token_Nodes([\r\n        CREATE_Property_Access_Expression([\"exports\", \"default\"]),\r\n        node.expression\r\n    ])]\r\n}\r\n\r\nfunction appendExportsOfBindingElement(decl, nodes) {\r\n    if (ts.isBindingPattern(decl.name)) {\r\n        for (var _i = 0, _a = decl.name.elements; _i < _a.length; _i++) {\r\n            var element = _a[_i];\r\n            if (!ts.isOmittedExpression(element)) {\r\n                appendExportsOfBindingElement(element, nodes);\r\n            }\r\n        }\r\n    }\r\n    else if (!ts.isGeneratedIdentifier(decl.name)) {\r\n        nodes.push(CREATE_Equals_Token_Nodes([\r\n            CREATE_Property_Access_Expression([\"exports\", decl.name]),\r\n            decl.name\r\n        ]))\r\n    }\r\n}\r\nfunction checkModiferAndHaveExport(node, newNodes = [node]) {\r\n    if (\r\n        node.modifiers &&\r\n        node.modifiers.some(({ kind }) => ts.SyntaxKind.ExportKeyword === kind)\r\n    ) {\r\n        appendExportsOfBindingElement(node, newNodes)\r\n    }\r\n    return newNodes\r\n}\r\n\r\nfunction visitClassDeclaration(node) {\r\n\r\n    return checkModiferAndHaveExport(node)\r\n}\r\nfunction visitFunctionDeclaration(node) {\r\n\r\n    return checkModiferAndHaveExport(node)\r\n}\r\n\r\n\r\n\r\n\r\nfunction visitVariableStatement(node, newNodes = [node]) {\r\n    if (\r\n        node.modifiers &&\r\n        node.modifiers.some(({ kind }) => ts.SyntaxKind.ExportKeyword === kind)\r\n    ) {\r\n        for (var _i = 0, _a = node.declarationList.declarations; _i < _a.length; _i++) {\r\n            var variable = _a[_i];\r\n            appendExportsOfBindingElement(variable, newNodes)\r\n        }\r\n    }\r\n    return newNodes\r\n}"]}