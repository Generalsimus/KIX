{"version":3,"file":"createFactory.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/createFactory.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAoD;AACpD,kDAAuD;AAEvD,MAAM,EACF,WAAW,EACX,sBAAsB,EACtB,uBAAuB,EACvB,6BAA6B,EAC7B,yBAAyB,EACzB,oBAAoB,EACpB,gBAAgB,EAChB,8BAA8B,EACjC,GAAG,oBAAO,CAAA;AACX,MAAM,EAAE,SAAS,EAAE,GAAG,uBAAU,CAAA;AACnB,QAAA,eAAe,GAAG;IAC3B,uBAAuB,EAAE,CAAC,KAAK,EAAE,EAAE;QAC/B,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACjC,OAAO,sBAAsB,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;IACN,CAAC;IACD,qBAAqB,EAAE,CAAC,KAAK,EAAE,EAAE;QAE7B,OAAO,uBAAuB,CAC1B,SAAS,EACT,6BAA6B,CACzB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,EAAE;YAEhC,OAAO,yBAAyB,CAC5B,QAAQ,EACR,SAAS,EACT,SAAS,EACT,SAAS,CACZ,CAAA;QACL,CAAC,CAAC,EACF,oBAAE,CAAC,SAAS,CAAC,KAAK,CACrB,CACJ,CAAA;IACL,CAAC;IACD,iCAAiC,EAAE,CAAC,SAAS,EAAE,EAAE;QAC7C,OAAO,8BAA8B,CACjC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CACnE,CAAA;IACL,CAAC;IACD,2BAA2B,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,kBAAkB,EAAE,EAAE;QAElE,IAAI,CAAC,IAAI,CAAC,oBAAO,CAAC,qBAAqB,CAAC,oBAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;QAE7E,OAAO,sBAAsB,CACzB,uBAAe,CAAC,iCAAiC,CAAC,CAAC,kBAAkB,EAAE,IAAA,qBAAa,EAAC,UAAU,CAAC,CAAC,CAAC,EAClG,oBAAO,CAAC,WAAW,CAAC,oBAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAC9C,oBAAO,CAAC,oBAAoB,CACxB,oBAAO,CAAC,6BAA6B,CAAC,oBAAO,CAAC,wBAAwB,CAClE,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,CAAC,oBAAO,CAAC,0BAA0B,CAC/B,SAAS,EACT,SAAS,EACT,SAAS,EACT,oBAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,EACnC,SAAS,EACT,SAAS,EACT,SAAS,CACZ,CAAC,EACF,SAAS,EACT,oBAAO,CAAC,WAAW,CACf,IAAI,EACJ,IAAI,CACP,CACJ,CAAC,EACF,SAAS,EACT,CAAC,oBAAO,CAAC,6BAA6B,CAClC,EAAE,EACF,KAAK,CACR,CAAC,CACL,CACJ,CAAA;IACL,CAAC;CACJ,CAAA","sourcesContent":["import ts, { factory, SyntaxKind } from \"typescript\"\r\nimport { getColumnName } from \"../../../Helpers/utils\";\r\nimport { App } from \"../../App\";\r\nconst {\r\n    createToken,\r\n    createBinaryExpression,\r\n    createVariableStatement,\r\n    createVariableDeclarationList,\r\n    createVariableDeclaration,\r\n    createNumericLiteral,\r\n    createIdentifier,\r\n    createPropertyAccessExpression\r\n} = factory\r\nconst { PlusToken } = SyntaxKind\r\nexport const generateFactory = {\r\n    CREATE_Plus_Token_Nodes: (Nodes) => {\r\n        return Nodes.reduce((NodeA, NodeB) => {\r\n            return createBinaryExpression(NodeA, createToken(PlusToken), NodeB)\r\n        })\r\n    },\r\n    CREATE_Const_Variable: (Nodes) => {\r\n\r\n        return createVariableStatement(\r\n            undefined,\r\n            createVariableDeclarationList(\r\n                Nodes.map(([NameNode, ValueNode]) => {\r\n\r\n                    return createVariableDeclaration(\r\n                        NameNode,\r\n                        undefined,\r\n                        undefined,\r\n                        ValueNode\r\n                    )\r\n                }),\r\n                ts.NodeFlags.Const\r\n            )\r\n        )\r\n    },\r\n    CREATE_Property_Access_Expression: (propertys) => {\r\n        return createPropertyAccessExpression(\r\n            ...propertys.map((propetyName) => createIdentifier(propetyName))\r\n        )\r\n    },\r\n    CREATE_Export_File_Function: (body, FILE_INDEX, Import_Module_Name) => {\r\n\r\n        body.push(factory.createReturnStatement(factory.createIdentifier(\"exports\")))\r\n\r\n        return createBinaryExpression(\r\n            generateFactory.CREATE_Property_Access_Expression([Import_Module_Name, getColumnName(FILE_INDEX)]),\r\n            factory.createToken(ts.SyntaxKind.EqualsToken),\r\n            factory.createCallExpression(\r\n                factory.createParenthesizedExpression(factory.createFunctionExpression(\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    [factory.createParameterDeclaration(\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        factory.createIdentifier(\"exports\"),\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    )],\r\n                    undefined,\r\n                    factory.createBlock(\r\n                        body,\r\n                        true\r\n                    )\r\n                )),\r\n                undefined,\r\n                [factory.createObjectLiteralExpression(\r\n                    [],\r\n                    false\r\n                )]\r\n            )\r\n        )\r\n    }\r\n}"]}