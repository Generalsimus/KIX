{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../init/Compiler/Transpiler/JSX/utils.js"],"names":[],"mappings":"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","sourcesContent":["import ts, {\r\n    factory,\r\n    visitEachChild,\r\n    getDirectoryPath,\r\n    isNamespaceExport,\r\n    idText,\r\n    createIdentifier,\r\n    normalizeSlashes,\r\n    SyntaxKind,\r\n    getLocalNameForExternalImport,\r\n    collectExternalModuleInfo,\r\n    createIdentifier,\r\n    SignatureKind,\r\n    createNull\r\n} from \"typescript\"\r\nimport {\r\n    generateFactory\r\n} from \"../createFactoryCode\"\r\nconst {\r\n    createStringLiteral,\r\n    createIdentifier,\r\n    createArrayLiteralExpression,\r\n    createUniqueName\r\n} = factory\r\nconst {\r\n    CREATE_Object_WiTH_String_Keys,\r\n    CREATE_Spread_Assignment,\r\n    CREATE_CAll_Function,\r\n    CREATE_Prop_Registrator_For_Attribute,\r\n    CREATE_Prop_Registrator_For_Child\r\n} = generateFactory\r\n\r\n\r\n\r\nconst useJsxPropRegistrator = (visitor, CTX, NODE, getRegistratorBody) => {\r\n    // იქმნება jsx ში მოთავსებული პროპების რეგისტრატორი\r\n    const OldRegistrator = CTX.getJSXPropertyRegistrator\r\n    let getRegistratorName;\r\n    CTX.getJSXPropertyRegistrator = () => (getRegistratorName || (getRegistratorName = createUniqueName(\"__JSX_PROP_REGISTRATOR\")))\r\n    /////////////////////////////////////////////////////\r\n    const newNode = visitor(NODE)\r\n    // jsx მოთავსებული პროპების რეგისტრატორი უბრუნდება საწყის მნიშვნელობას\r\n    CTX.getJSXPropertyRegistrator = OldRegistrator\r\n    /////////////////////////////////////////////////////////////////////////\r\n\r\n    if (getRegistratorName) {\r\n        return getRegistratorBody(newNode, getRegistratorName)\r\n    }\r\n    return newNode\r\n}\r\n\r\nexport const ConvertJsxToObject = (visitor, CTX, tagName, attributes, children) => {\r\n    const newPropertys = []\r\n\r\n\r\n\r\n    // გენერირდება ტეგის სახელი და მისი შვილები\r\n    const newChildren = children.reduce((newChildren, child, index) => {\r\n        child = getInitializer(child)\r\n        if (!child) {\r\n            return newChildren\r\n        }\r\n        if (SyntaxKind.JsxText === child.kind) {\r\n            if (!((index === 0 || index === (children.length - 1)) && child.text.trim().length === 0)) {\r\n                newChildren.push(visitor(createStringLiteral(child.text)))\r\n            }\r\n        } else {\r\n            newChildren.push(useJsxPropRegistrator(visitor, CTX, child, CREATE_Prop_Registrator_For_Child))\r\n        }\r\n        return newChildren\r\n    }, [])\r\n\r\n    if (newChildren.length) {\r\n        if (newChildren.length === 1) {\r\n            newPropertys.push([tagName, newChildren[0]])\r\n        } else {\r\n            newPropertys.push([tagName, createArrayLiteralExpression(\r\n                newChildren,\r\n                false\r\n            )])\r\n        }\r\n    } else {\r\n        newPropertys.push([tagName, createNull()])\r\n    }\r\n    ////////////////////////////////////////////\r\n\r\n    // გენერირდება ატრიბუები\r\n    const EventsKeys = []\r\n    let EventExist;\r\n    for (const attribute of attributes.properties) {\r\n        const attrName = idText(attribute.name)\r\n        let initializer = getInitializer(attribute.initializer)\r\n\r\n        if (!initializer) {\r\n            continue;\r\n        }\r\n\r\n        if (/^(on+[A-Z])/.test(attrName)) {\r\n            EventsKeys.push([attribute.name, visitor(initializer)])\r\n        } else if (attrName === \"e\") {\r\n            EventExist = initializer\r\n        } else {\r\n            newPropertys.push([attribute.name, useJsxPropRegistrator(visitor, CTX, initializer, CREATE_Prop_Registrator_For_Attribute)])\r\n        }\r\n    }\r\n    /////////////////////////\r\n\r\n\r\n\r\n    // გენერირდება ევენთები\r\n    if (EventExist) {\r\n        const eKind = EventExist.kind\r\n        if (eKind === SyntaxKind.ObjectLiteralExpression) {\r\n            Array.prototype.push.apply(EventsKeys, EventExist.properties)\r\n        } else if (EventsKeys.length) {\r\n            EventsKeys.push(CREATE_Spread_Assignment(EventExist))\r\n        }\r\n    }\r\n    if (EventsKeys.length) {\r\n\r\n        newPropertys.push([createIdentifier(\"e\"), CREATE_Object_WiTH_String_Keys(EventsKeys)])\r\n    }\r\n    ///////////////////////\r\n\r\n    return CREATE_Object_WiTH_String_Keys(newPropertys)\r\n}\r\n\r\n\r\n\r\nconst getInitializer = (initializer) => {\r\n    if (initializer.kind === SyntaxKind.JsxExpression) {\r\n        if (!initializer.expression) {\r\n            return\r\n        }\r\n        return initializer.expression\r\n    }\r\n    return initializer\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst getExpressionNames = ({ expression, argumentExpression, name }, expressionIdentifers = []) => {\r\n\r\n\r\n    if (ts.isPropertyAccessExpression(expression)) {\r\n        getExpressionNames(expression, expressionIdentifers)\r\n    } else if (ts.isElementAccessExpression(expression)) {\r\n        getExpressionNames(expression.expression, expressionIdentifers)\r\n    } else {\r\n        expressionIdentifers.push(expression)\r\n    }\r\n\r\n\r\n    expressionIdentifers.push(argumentExpression || createStringLiteral(idText(name)))\r\n\r\n    return expressionIdentifers\r\n}\r\n\r\nexport const PropertyAccessExpressionOrElementAccessExpression = (NODE, visitor, CTX) => {\r\n    if (CTX.getJSXPropertyRegistrator) {\r\n        return visitor(CREATE_CAll_Function(CTX.getJSXPropertyRegistrator(), getExpressionNames(NODE)))\r\n    }\r\n\r\n    return visitEachChild(NODE, visitor, CTX)\r\n}\r\n\r\n\r\nexport const visitFunctionDeclarationForJsxRegistrator = (NODE, visitor, CTX) => {\r\n    const OldRegistrator = CTX.getJSXPropertyRegistrator\r\n    CTX.getJSXPropertyRegistrator = undefined\r\n    const newNode = visitEachChild(NODE, visitor, CTX)\r\n    CTX.getJSXPropertyRegistrator = OldRegistrator\r\n    return newNode\r\n}"]}