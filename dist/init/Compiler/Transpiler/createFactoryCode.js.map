{"version":3,"file":"createFactoryCode.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/createFactoryCode.js"],"names":[],"mappings":"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","sourcesContent":["import { type } from \"os\";\r\nimport ts, { factory, SyntaxKind } from \"typescript\"\r\nimport { getColumnName } from \"../../../Helpers/utils\";\r\nimport { App } from \"../../App\";\r\nimport { createObjectPropertyLoop } from \"./utils\";\r\nconst {\r\n    createToken,\r\n    createBinaryExpression,\r\n    createVariableStatement,\r\n    createVariableDeclarationList,\r\n    createVariableDeclaration,\r\n    createBlock,\r\n    createIdentifier,\r\n    createPropertyAccessExpression,\r\n    createObjectLiteralExpression,\r\n    createParameterDeclaration,\r\n    createParenthesizedExpression,\r\n    createArrowFunction,\r\n    createCallExpression,\r\n    createObjectBindingPattern,\r\n    createBindingElement,\r\n    createExpressionStatement,\r\n    createElementAccessExpression,\r\n    createForInStatement,\r\n    createPropertyAssignment,\r\n    createStringLiteral,\r\n    createSpreadAssignment,\r\n    createUniqueName,\r\n    createReturnStatement\r\n} = factory\r\nconst { PlusToken, EqualsToken } = SyntaxKind\r\nexport const generateFactory = {\r\n    CREATE_Plus_Token_Nodes: (Nodes) => {\r\n        return generateFactory.CREATE_Token_Nodes(Nodes, PlusToken)\r\n    },\r\n    CREATE_Equals_Token_Nodes: (Nodes) => {\r\n        return generateFactory.CREATE_Token_Nodes(Nodes, EqualsToken)\r\n    },\r\n    CREATE_Token_Nodes: (Nodes, Token) => {\r\n        return Nodes.reduce((NodeA, NodeB) => {\r\n            return createBinaryExpression(NodeA, createToken(Token), NodeB)\r\n        })\r\n    },\r\n    CREATE_Arrow_Function_With_Parenthesized_Expression: (ClildNode, ArgumentsNodes) => {\r\n        return createArrowFunction(\r\n            undefined,\r\n            undefined,\r\n            ArgumentsNodes.map((argNode) => createParameterDeclaration(\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                argNode,\r\n                undefined,\r\n                undefined,\r\n                undefined\r\n            )),\r\n            undefined,\r\n            createToken(ts.SyntaxKind.EqualsGreaterThanToken),\r\n            factory.createParenthesizedExpression(ClildNode)\r\n        )\r\n    },\r\n    CREATE_Prop_Registrator_For_Attribute: (newNode, getRegistratorName) => generateFactory.CREATE_Arrow_Function_With_Parenthesized_Expression(newNode, [\r\n        createUniqueName(\"__node\"),\r\n        createUniqueName(\"__atrName\"),\r\n        getRegistratorName\r\n    ]),\r\n    CREATE_Prop_Registrator_For_Child: (newNode, getRegistratorName) => generateFactory.CREATE_Arrow_Function_With_Parenthesized_Expression(newNode, [\r\n        createUniqueName(\"__node\"),\r\n        getRegistratorName\r\n    ]),\r\n    CREATE_Object_Binding_Pattern: (namesObject, returnValue = []) => {\r\n        for (const nameKey in namesObject) {\r\n            const value = namesObject[nameKey]\r\n            returnValue.push(createBindingElement(\r\n                undefined,\r\n                value && createIdentifier(nameKey),\r\n                value && generateFactory.CREATE_Object_Binding_Pattern(value) || createIdentifier(nameKey),\r\n                undefined\r\n            ))\r\n\r\n        }\r\n        return createObjectBindingPattern(returnValue)\r\n    },\r\n    CREATE_CAll_Function: (CallNameOrNode, Arguments) => {\r\n        return createCallExpression(\r\n            typeof CallNameOrNode === \"string\" ? createIdentifier(CallNameOrNode) : CallNameOrNode,\r\n            undefined,\r\n            Arguments\r\n        )\r\n    },\r\n    CREATE_Const_Variable: (Nodes) => {\r\n\r\n        return createVariableStatement(\r\n            undefined,\r\n            createVariableDeclarationList(\r\n                Nodes.map(([NameNode, ValueNode]) => {\r\n\r\n                    return createVariableDeclaration(\r\n                        NameNode,\r\n                        undefined,\r\n                        undefined,\r\n                        ValueNode\r\n                    )\r\n                }),\r\n                ts.NodeFlags.Const\r\n            )\r\n        )\r\n    },\r\n    CREATE_Object_WiTH_String_Keys: (Nodes) => {\r\n        return createObjectLiteralExpression(\r\n            Nodes.map((ArgNodesOrNode) => (ArgNodesOrNode instanceof Array ? createPropertyAssignment.apply(null, ArgNodesOrNode) : ArgNodesOrNode),\r\n                false\r\n            ))\r\n    },\r\n    CREATE_Spread_Assignment: (Node) => {\r\n        return createSpreadAssignment(createParenthesizedExpression(Node))\r\n    },\r\n    CREATE_Assign_Polyfil: (AppNameNode, Nodes) => {\r\n\r\n        return generateFactory.CREATE_Const_Variable([[\r\n            AppNameNode,\r\n            createArrowFunction(\r\n                undefined,\r\n                undefined,\r\n                [\r\n                    createParameterDeclaration(\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        createIdentifier(\"n\"),\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    ),\r\n                    createParameterDeclaration(\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        createIdentifier(\"s\"),\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    )\r\n                ],\r\n                undefined,\r\n                createToken(ts.SyntaxKind.EqualsGreaterThanToken),\r\n                createBlock(\r\n                    [createForInStatement(\r\n                        createVariableDeclarationList(\r\n                            [createVariableDeclaration(\r\n                                createIdentifier(\"o\"),\r\n                                undefined,\r\n                                undefined,\r\n                                undefined\r\n                            )],\r\n                            ts.NodeFlags.Const\r\n                        ),\r\n                        createIdentifier(\"s\"),\r\n                        createBlock(\r\n                            [createExpressionStatement(createBinaryExpression(\r\n                                createElementAccessExpression(\r\n                                    createIdentifier(\"n\"),\r\n                                    createIdentifier(\"o\")\r\n                                ),\r\n                                createToken(ts.SyntaxKind.EqualsToken),\r\n                                createElementAccessExpression(\r\n                                    createIdentifier(\"s\"),\r\n                                    createIdentifier(\"o\")\r\n                                )\r\n                            ))],\r\n                            false\r\n                        )\r\n                    )],\r\n                    false\r\n                )\r\n            )\r\n        ]])\r\n    },\r\n    CREATE_Property_Access_Expression: (propertys) => {\r\n        return propertys.reduce((propName1, propName2) => {\r\n            return createPropertyAccessExpression(\r\n                typeof propName1 === \"string\" ? createIdentifier(propName1) : propName1,\r\n                typeof propName2 === \"string\" ? createIdentifier(propName2) : propName2,\r\n            )\r\n        })\r\n    },\r\n    CREATE_Property_Access_Equals_Token: (Node, decoratorPropertys = []) => {\r\n        return generateFactory.CREATE_Equals_Token_Nodes([\r\n            generateFactory.CREATE_Property_Access_Expression(decoratorPropertys),\r\n            Node\r\n        ])\r\n    },\r\n    CREATE_Export_File_Function: (body, Import_Module_Name, FILE_INDEX) => {\r\n\r\n        body.push(createReturnStatement(createIdentifier(\"exports\")))\r\n        return generateFactory.CREATE_Property_Access_Equals_Token(\r\n            createCallExpression(\r\n                createParenthesizedExpression(createArrowFunction(\r\n                    undefined,\r\n                    undefined,\r\n                    [createParameterDeclaration(\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        createIdentifier(\"exports\"),\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    )],\r\n                    undefined,\r\n                    createToken(ts.SyntaxKind.EqualsGreaterThanToken),\r\n                    createBlock(\r\n                        body,\r\n                        true\r\n                    )\r\n                )),\r\n                undefined,\r\n                [createObjectLiteralExpression(\r\n                    [],\r\n                    false\r\n                )]\r\n            )\r\n            , [Import_Module_Name, getColumnName(FILE_INDEX)])\r\n\r\n\r\n    }\r\n}"]}