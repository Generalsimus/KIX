{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../init/Compiler/Transpiler/utils.js"],"names":[],"mappings":"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","sourcesContent":["import { getDirectoryPath, SyntaxKind, visitEachChild, factory, normalizeSlashes } from \"typescript\"\r\nimport resolve from \"resolve\"\r\nimport chokidar from \"chokidar\"\r\nimport path from \"path\"\r\nimport { getColumnName } from \"../../../Helpers/utils\"\r\n\r\n\r\nconst {\r\n    createToken,\r\n    createBinaryExpression,\r\n    createVariableStatement,\r\n    createVariableDeclarationList,\r\n    createVariableDeclaration,\r\n    createBlock,\r\n    createIdentifier,\r\n    createPropertyAccessExpression,\r\n    createObjectLiteralExpression,\r\n    createParameterDeclaration,\r\n    createParenthesizedExpression,\r\n    createArrowFunction,\r\n    createCallExpression,\r\n    createObjectBindingPattern,\r\n    createBindingElement\r\n} = factory\r\n\r\n\r\n\r\nconst KixModulePATH = normalizeSlashes(path.join(__dirname, \"../../../main/index.js\"))\r\nexport const defaultModulePaths = {\r\n    \"kix\": KixModulePATH,\r\n    [KixModulePATH]: \"kix\"\r\n}\r\nexport function resolveModule(modulePath, fileDirectory) {\r\n    try {\r\n\r\n        return normalizeSlashes(resolve.sync(modulePath, {\r\n            basedir: fileDirectory,\r\n            extensions: ['.js', '.ts', '.jsx', '.tsx'],\r\n        }))\r\n    } catch {\r\n        return defaultModulePaths[modulePath]\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// მოდულის შესახებ ინფორმაციის ქეშირება\r\nexport const ModulesThree = new Map()\r\nlet Module_INDEX = 0\r\nexport const getOrSetModuleInfo = (modulePath, compilerOptions) => {\r\n\r\n    const module = ModulesThree.get(modulePath)\r\n    const moduleInfo = module || {\r\n        Module_INDEX: Module_INDEX++,\r\n        __Module_Window_Name: defaultModulePaths[modulePath] ? compilerOptions.__Node_Module_Window_Name : compilerOptions.__Module_Window_Name\r\n    }\r\n    if (!module) {\r\n        ModulesThree.set(modulePath, moduleInfo)\r\n    }\r\n\r\n    return moduleInfo\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const configModules = (NODE, moduleInfo, compilerOptions) => {\r\n\r\n    const fileDirectory = getDirectoryPath(NODE.originalFileName)\r\n    const oldNodeModules = moduleInfo.NodeModules || {}\r\n    const NodeModules = {}\r\n    const LocalModules = {}\r\n\r\n    const ModuleColection = NODE.imports.reduce((ModuleColection, ModuleNode) => {\r\n        const { text, parent, kind } = ModuleNode\r\n\r\n        const modulePath = resolveModule(text, fileDirectory)\r\n\r\n        if (!modulePath) {\r\n            return ModuleColection\r\n        }\r\n        const module = ModulesThree.get(modulePath)\r\n\r\n        const childModuleInfo = module || {\r\n            Module_INDEX: Module_INDEX++,\r\n            __Module_Window_Name: defaultModulePaths[modulePath] ? compilerOptions.__Node_Module_Window_Name : compilerOptions.__Module_Window_Name\r\n        }\r\n        if (!module) {\r\n            ModulesThree.set(modulePath, childModuleInfo)\r\n        }\r\n\r\n\r\n        const ModuleKindName = SyntaxKind[parent?.expression?.kind]\r\n        childModuleInfo.KindName = ModuleKindName\r\n\r\n\r\n        if ((/[/\\\\]node_modules[/\\\\]/).test(modulePath)) {\r\n            childModuleInfo.isNodeModule = true\r\n            childModuleInfo.__Module_Window_Name = compilerOptions.__Node_Module_Window_Name\r\n            NodeModules[modulePath] = childModuleInfo\r\n            if (!oldNodeModules[modulePath]) {\r\n                compilerOptions.resetModuleFiles()\r\n            }\r\n\r\n        } else {\r\n            LocalModules[modulePath] = childModuleInfo;\r\n        }\r\n        ModuleColection[text] = childModuleInfo\r\n        return ModuleColection\r\n    }, {})\r\n    moduleInfo.ModuleColection = ModuleColection\r\n    moduleInfo.NodeModules = NodeModules\r\n    moduleInfo.LocalModules = LocalModules\r\n    return ModuleColection\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst concatBeforOrAfterTransformers = (BeforeOrAfter, transfromers = {}) => {\r\n    for (const transformersObject of BeforeOrAfter) {\r\n        for (const transfromersKey in transformersObject)\r\n            if (transfromersKey in transfromers) {\r\n                const transfromer = transfromers[transfromersKey]\r\n                const newtransfromer = transformersObject[transfromersKey]\r\n                transfromers[transfromersKey] = (node, ...args) => newtransfromer(transfromer(node, ...args), ...args)\r\n            } else {\r\n                transfromers[transfromersKey] = transformersObject[transfromersKey]\r\n            }\r\n    }\r\n    return transfromers\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getTransformersObject = (before, after) => {\r\n    const transpilerBefore = concatBeforOrAfterTransformers(before)\r\n    const transpilerAfter = concatBeforOrAfterTransformers(after)\r\n    return {\r\n        before: [\r\n            (CTX) => {\r\n                const visitor = (NODE) => {\r\n\r\n                    // console.log(SyntaxKind[NODE.kind])\r\n\r\n                    // return visitEachChild(NODE, visitor, CTX)\r\n                    return (transpilerBefore[NODE.kind] || visitEachChild)(NODE, visitor, CTX)\r\n                }\r\n\r\n                return visitor\r\n            }\r\n        ],\r\n        // after: [\r\n        //     (CTX) => {\r\n        //         const visitor = (NODE) => {\r\n\r\n        //             // console.log(SyntaxKind[NODE.kind])\r\n\r\n        //             return (transpilerAfter[NODE.kind] || visitEachChild)(NODE, visitor, CTX)\r\n        //         }\r\n\r\n        //         return visitor\r\n        //     }\r\n        // ]\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const createObjectPropertyLoop = (namesObject, returnValue = []) => {\r\n    for (const nameKey in namesObject) {\r\n        const value = namesObject[nameKey]\r\n        returnValue.push(createBindingElement(\r\n            undefined,\r\n            value && createIdentifier(nameKey),\r\n            value && createObjectPropertyLoop(value) || createIdentifier(nameKey),\r\n            undefined\r\n        ))\r\n\r\n    }\r\n    return createObjectBindingPattern(returnValue)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const geModuleLocationMeta = (ModuleData, compilerOptions) => {\r\n    console.log(\"🚀 --> file: utils.js --> line 232 --> geModuleLocationMeta --> ModuleData\", ModuleData);\r\n    if (!ModuleData) {\r\n        return\r\n    }\r\n\r\n\r\n    return ModuleData.__Module_Window_Name === compilerOptions.__Import_Module_Name ?\r\n        [compilerOptions.__Import_Module_Name, getColumnName(ModuleData.Module_INDEX)] :\r\n        [\"window\", ModuleData.__Module_Window_Name, getColumnName(ModuleData.Module_INDEX)]\r\n}"]}