{"version":3,"file":"readSourceFiles.js","sourceRoot":"","sources":["../../../init/Compiler/readSourceFiles.js"],"names":[],"mappings":";;;AAkBA,gCAEe;AAKf,MAAM,EACF,qBAAqB,EACrB,SAAS,EACT,QAAQ,EACR,oBAAoB,EACpB,yBAAyB,EACzB,iBAAiB,EACjB,SAAS,EACT,MAAM,EACN,QAAQ,EACX,GAAG,SAAG,CAAA;AAEA,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,WAAW,GAAG,EAAE,EAAE,EAAE;IAG1D,yDAAyD;IACzD,4CAA4C;IAC5C,oIAAoI;IAEpI,IAAI;IACJ,sCAAsC;IACtC,yCAAyC;IACzC,2GAA2G;IAC3G,kCAAkC;IAClC,OAAO;IACP,oGAAoG;IACpG,kCAAkC;IAClC,wDAAwD;IACxD,+CAA+C;IAC/C,IAAI;IAEJ,4EAA4E;IAC5E,4CAA4C;IAC5C,0CAA0C;IAE1C,sBAAsB;IACtB,gCAAgC;IAChC,wDAAwD;IACxD,oFAAoF;IACpF,yFAAyF;IACzF,oBAAoB;IACpB,6CAA6C;IAC7C,wBAAwB;IACxB,oBAAoB;IACpB,gBAAgB;IAChB,wBAAwB;IACxB,8BAA8B;IAC9B,SAAS;IACT,gDAAgD;IAChD,2DAA2D;IAC3D,gEAAgE;IAChE,qBAAqB;IACrB,mCAAmC;IACnC,WAAW;AAEf,CAAC,CAAA;AA3CY,QAAA,eAAe,mBA2C3B","sourcesContent":["// @ts-ignore\r\nimport ts, {\r\n    createSourceFile,\r\n    ScriptTarget,\r\n    getExternalModuleName,\r\n    notImplemented,\r\n    transformNodes,\r\n    factory,\r\n    getTransformers,\r\n    transformNodes,\r\n    ScriptKind\r\n} from \"typescript\"\r\nimport fs from \"fs\"\r\nimport path from \"path\"\r\nimport chokidar from \"chokidar\"\r\nimport {\r\n    getPathMeta\r\n} from \"../../Helpers/utils\"\r\nimport {\r\n    App\r\n} from \"../App\"\r\nimport ss from \"ts-polyfill\"\r\nimport { PreparingModules } from \"./PreparingModules\"\r\n\r\n\r\nconst {\r\n    __SourceFileThreshold,\r\n    __Printer,\r\n    __Writer,\r\n    __scriptTransformers,\r\n    __declarationTransformers,\r\n    __compilerOptions,\r\n    __dirname,\r\n    __Host,\r\n    __Target\r\n} = App\r\n \r\nexport const readSourceFiles = (FilePath, sourceFiles = []) => {\r\n   \r\n\r\n    // const host = ts.createCompilerHost(__compilerOptions);\r\n    // host.writeFile = (fileName, content) => {\r\n    //     console.log(\"ðŸš€ ---> file: readSourceFiles.js ---> line 87 ---> readSourceFiles ---> fileName, content\", fileName, \"content\")\r\n\r\n    // }\r\n    // const sououced = host.getSourceFile\r\n    // // host.getSourceFile = (...args) => {\r\n    // //     console.log(\"ðŸš€ ---> file: readSourceFiles.js ---> line 93 ---> readSourceFiles ---> args\", args)\r\n    // //     return sououced(...args)\r\n    // // }\r\n    // console.log(\"ðŸš€ ---> file: readSourceFiles.js ---> line 98 ---> readSourceFiles ---> host\", host)\r\n    // host.readFile = (fileName) => {\r\n    //     console.log(\"ðŸš€ ---> file: , fileName\", fileName)\r\n    //     return fs.readFileSync(fileName, \"utf8\")\r\n    // }\r\n\r\n    // program = ts.createProgram([FilePath], __compilerOptions, host, program);\r\n    // const files = program.getFilesByNameMap()\r\n    // const getfiles = program.getSourceFiles\r\n \r\n    // setInterval(() => {\r\n    //     console.time(\"TEST\" + i);\r\n    //     // files.get(host.getCanonicalFileName(FilePath))\r\n    //     const file = files.get(host.getCanonicalFileName(ts.normalizePath(FilePath)))\r\n    //     files.set(host.getCanonicalFileName(ts.normalizePath(FilePath)), createSourceFile(\r\n    //         FilePath,\r\n    //         fs.readFileSync(FilePath, \"utf8\"),\r\n    //         // @ts-ignore\r\n    //         __Target,\r\n    //         true,\r\n    //         // @ts-ignore\r\n    //         ts.ScriptKind[\"JS\"]\r\n    //     ))\r\n    //     // file.version = (file.version ?? 0) + 1\r\n    //     // console.log(syntaxTreeCache.getCurrentSourceFile)\r\n    //     // console.log(\"ðŸš€  ---> setInterval ---> files\", file ) \r\n    //     program.emit()\r\n    //     console.timeEnd(\"TEST\" + i);\r\n    // }, 1500)\r\n \r\n}"]}